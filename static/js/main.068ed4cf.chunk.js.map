{"version":3,"sources":["art/spritesheet.png","art/theDude.png","utils.js","GameClasses.js","scripts/Grid.js","scripts/Hero.js","scripts/Pathfinding.js","components/GameCanvas.js","GameInterface.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","src_utils","_prt","_callee","to","regenerator_default","a","wrap","_context","prev","next","ms","Promise","r","setTimeout","abrupt","sent","stop","this","_randInt","b","Math","floor","random","_getRandomGridBox","grid","destBox","key","_this","nDirections","0","1","2","3","5","6","7","8","boxConfig","_getRandomTypeConstant","gridTypes","type","const","passable","friction","damage","color","sprite","x","y","width","height","Number","toFixed","char","charTypes","spriteSet","down","up","left","right","turret","turretTypes","GameClasses","_ref","game","utils","GridBox","_ref2","gX","gY","origSprite","Object","assign","_resetSprite","gScore","hScore","fScore","parentZone","_setParent","box","_clearParent","isSelected","_select","_deselect","isSource","isNextSource","_setNextSource","_setSource","heroPosition","_clearSource","isRaySource","_setRaySource","isDestination","isNextDestination","_setNextDestination","_setDestination","heroDestination","_clearDestination","_setNearestState","_setNeighborState","_getNeighbors","neighbors","nPosition","x_coord","y_coord","neighbor","gridHash","concat","excludeDiagonals","direction","push","CharBox","_ref3","_this2","_setSpriteDirection","dir","NORTH","NORTH_WEST","NORTH_EAST","SOUTH","SOUTH_WEST","SOUTH_EAST","EAST","WEST","scripts_Grid","Grid","classCallCheck","_initNewGrid","rows","cols","t_width","t_height","Error","Y","X","gridTypeConfig","gridBox","Classes","objectSpread","_resetGrid","nextSrc","nextDest","coords","console","log","scripts_Hero","TWEEN","Hero","_initNewHero","grid_position","heroConfig","_tween","hero","destination_box","path","tween","Tween","start","Pathfinding","PathFinder","_findPath","allDone","Scripts","findingPath","iterations","nextNearest","openList","closedList","_iteratePath","_finishPath","asyncToGenerator","mark","lowestScore","nextInOpened","nextKey","tweenHeroWithAlgorithm","forEach","_calcGScore","_calcFScore","showPath","_calcHScore","keys","length","abs","score","require","gridSprites","Image","src","heroSprites","GameCanvas","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","mode","props","cWidth","cHeight","componentDidMount","showScore","_initializeGameCanvas","canvas","refs","g_canvas","ctx","getContext","addEventListener","e","gCoords","ceil","clientX","clientY","gridKey","boxClicked","PF","window","isPaused","_renderLoop","cancelAnimationFrame","frameId","_ts","_drawRender","update","requestAnimationFrame","clearRect","_drawGrid","_drawBox","coord","fillRect","drawImage","font","fillStyle","fillText","assertThisInitialized","Pathfinder","react_default","createElement","Fragment","id","ref","Component","GameInterface","style","display","justifyContent","alignItems","components_GameCanvas","Boolean","location","hostname","match","ReactDOM","render","src_GameInterface","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.068ed4cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spritesheet.f9ce9100.png\";","module.exports = __webpack_public_path__ + \"static/media/theDude.7e8a22ae.png\";","class Utils {\r\n   _prt = async to => await ((ms => new Promise(r => setTimeout(r, ms)))(to));\r\n   _randInt = (a, b) => Math.floor(Math.random() * (b - a) + a);\r\n   _getRandomGridBox = grid => {\r\n      let destBox = null;\r\n      for (let key in grid) if (this._randInt(0, 100) > 70) destBox = grid[key];\r\n      return destBox ? destBox : this._getRandomGridBox(grid);\r\n   }\r\n   nDirections = { 0: 'NORTH_WEST', 1: 'WEST', 2: 'SOUTH_WEST', 3: 'NORTH', 5: 'SOUTH', 6: 'NORTH_EAST', 7: 'EAST', 8: 'SOUTH_EAST' };\r\n   boxConfig = {\r\n      grid: {\r\n         _getRandomTypeConstant: () => ([0, 0, 2, 0, 2, 2, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 2, 0, 0][(Math.floor(Math.random() * (20 - 1)) + 1)]),\r\n         gridTypes: {\r\n            0: {\r\n               type: 'walkable',\r\n               const: 0,\r\n               passable: true,\r\n               friction: 0,\r\n               damage: 0,\r\n               color: '#d2d2d2',\r\n               sprite: { x: 0, y: 0, width: 50, height: 50, type: 0 }\r\n            },\r\n            1: {\r\n               type: 'walkableSlow',\r\n               const: 1,\r\n               passable: true,\r\n               friction: Number((Math.random() * (.8 - .3) + .3).toFixed(2)),\r\n               damage: 0,\r\n               color: '#80cccc',\r\n               sprite: [\r\n                  { x: 100, y: 0, width: 50, height: 50, type: 1 },\r\n                  { x: 100, y: 50, width: 50, height: 50, type: 1 },\r\n                  { x: 100, y: 100, width: 50, height: 50, type: 1 }\r\n               ][this._randInt(1, 3) - 1]\r\n            },\r\n            2: {\r\n               type: 'blocked',\r\n               const: 2,\r\n               passable: false,\r\n               friction: 0,\r\n               damage: 0,\r\n               color: '#7a7a7a',\r\n               sprite: [\r\n                  { x: 50, y: 0, width: 50, height: 50, type: 2 },\r\n                  { x: 50, y: 50, width: 50, height: 50, type: 2 },\r\n                  { x: 50, y: 100, width: 50, height: 50, type: 2 }\r\n               ][this._randInt(1, 3) - 1]\r\n            },\r\n            3: {\r\n               type: 'damage',\r\n               passable: true,\r\n               const: 3,\r\n               friction: Number((Math.random() * (.8 - .3) + .3).toFixed(2)),\r\n               damage: Number((Math.random() * (.75 - .25) + .25).toFixed(2)),\r\n               color: '#c4341b',\r\n               sprite: [\r\n                  { x: 150, y: 0, width: 50, height: 50, type: 3 },\r\n                  { x: 150, y: 50, width: 50, height: 50, type: 3 },\r\n                  { x: 150, y: 100, width: 50, height: 50, type: 3 }\r\n               ][this._randInt(1, 3) - 1]\r\n            }\r\n         }\r\n      },\r\n      char: {\r\n         charTypes: {\r\n            0: {\r\n               type: 'ninja',\r\n               const: 0,\r\n               width: 50,\r\n               height: 50,\r\n               spriteSet: {\r\n                  down: { x: 0, y: 0, width: 56, height: 72 },\r\n                  up: { x: 0, y: 74, width: 53, height: 72 },\r\n                  left: { x: 0, y: 146, width: 53, height: 72 },\r\n                  right: { x: 0, y: 219, width: 53, height: 72 }\r\n               }\r\n            }\r\n         }\r\n      },\r\n      turret: {\r\n         turretTypes: {\r\n            0: {\r\n               type: 'gunner',\r\n               const: 0,\r\n               width: 50,\r\n               height: 50,\r\n               sprite: { x: 0, y: 0, width: 100, height: 50 }\r\n            }\r\n         }\r\n      }\r\n   }\r\n}\r\n\r\nexport default new Utils();","export default ({ game, utils }) => ({\r\n   GridBox: function GridBox({ key, gX, gY, x, y, width, height, type, passable, friction, damage, color, sprite }) {\r\n      this.key = key;\r\n      this.gX = gX;\r\n      this.gY = gY;\r\n      this.x = x || 0;\r\n      this.y = y || 0;\r\n      this.width = width || 0;\r\n      this.height = height || 0;\r\n\r\n      this.type = type;\r\n      this.passable = passable;\r\n      this.friction = friction;\r\n      this.damage = damage;\r\n      this.color = color;\r\n      this.sprite = sprite;\r\n      this.origSprite = Object.assign({}, sprite);\r\n      this._resetSprite = () => this.sprite = this.origSprite;\r\n\r\n      this.gScore = 0;\r\n      this.hScore = 0;\r\n      this.fScore = 0;\r\n\r\n      this.parentZone = {};\r\n      this._setParent = box => this.parentZone = box;\r\n      this._clearParent = () => this.parentZone = null;\r\n\r\n      this.isSelected = false;\r\n      this._select = () => this.isSelected = true;\r\n      this._deselect = () => this.isSelected = false;\r\n\r\n      this.isSource = false;\r\n      this.isNextSource = false;\r\n      this._setNextSource = () => this.isNextSource = true;\r\n      this._setSource = () => {\r\n         this.isSource = true;\r\n         this.sprite = { x: 0, y: 50, width: 50, height: 50, type: 0 };\r\n         game.heroPosition = this;\r\n         if (this.isNextSource) this.isNextSource = false;\r\n      }\r\n      this._clearSource = () => {\r\n         this.isSource = false;\r\n         this.sprite = this.origSprite;\r\n         delete game.heroPosition;\r\n      }\r\n\r\n      this.isRaySource = false;\r\n      this._setRaySource = () => this.isRaySource = true;\r\n\r\n      this.isDestination = false;\r\n      this.isNextDestination = false;\r\n      this._setNextDestination = () => this.isNextDestination = true;\r\n      this._setDestination = () => {\r\n         this.isDestination = true;\r\n         this.sprite = { x: 0, y: 100, width: 50, height: 50, type: 0 };\r\n         game.heroDestination = this;\r\n         if (this.isNextDestination) this.isNextDestination = false;\r\n      }\r\n      this._clearDestination = () => {\r\n         this.isDestination = false;\r\n         this.sprite = this.origSprite;\r\n         delete game.heroDestination;\r\n      }\r\n\r\n      this._setNearestState = () => !this.isDestination ? this.sprite = { x: 0, y: 150, width: 50, height: 50, type: 0 } : null;\r\n      this._setNeighborState = () => !this.isDestination ? this.sprite = { x: 0, y: 200, width: 50, height: 50, type: 0 } : null;\r\n      this._getNeighbors = () => {\r\n         let { gX, gY } = this;\r\n         let neighbors = [];\r\n         let nPosition = 0;\r\n         \r\n         for (let x_coord = gX - 1; x_coord <= gX + 1; x_coord++) {\r\n            for (let y_coord = gY - 1; y_coord <= gY + 1; y_coord++) {\r\n               if ((x_coord < 0 || y_coord < 0 || x_coord > 15 || y_coord > 11) || (x_coord === this.gX && y_coord === this.gY)) { nPosition++; continue; }\r\n               else {\r\n                  let neighbor = game.gridHash[`${x_coord}-${y_coord}`];\r\n\r\n                  // this line will exclude diagonal neighbors\r\n                  if (game.excludeDiagonals && (nPosition === 0 || nPosition === 2 || nPosition === 6 || nPosition === 8)) { nPosition++; continue; };\r\n\r\n                  neighbor.direction = utils.nDirections[nPosition]\r\n                  neighbors.push(neighbor);\r\n                  nPosition++;\r\n               }\r\n            }\r\n         }\r\n         return neighbors\r\n      }\r\n   },\r\n   CharBox: function CharBox({ x, y, width, height, type, color, sprite, spriteSet }) {\r\n      this.x = x || 0;\r\n      this.y = y || 0;\r\n      this.width = width || 0;\r\n      this.height = height || 0;\r\n\r\n      this.type = type;\r\n      this.color = color || 'rgba(255,255,255,0)';\r\n      this.sprite = sprite;\r\n      this.spriteSet = spriteSet;\r\n\r\n      this._setSpriteDirection = dir => {\r\n         let transDir = {\r\n            NORTH: 'up',\r\n            NORTH_WEST: 'up',\r\n            NORTH_EAST: 'up',\r\n            SOUTH: 'down',\r\n            SOUTH_WEST: 'down',\r\n            SOUTH_EAST: 'down',\r\n            EAST: 'right',\r\n            WEST: 'left'\r\n         };\r\n         this.sprite = this.spriteSet[transDir[dir || 'SOUTH']];\r\n      }\r\n   }\r\n})","export default ({ game, utils }) => {\r\n   class Grid {\r\n      _initNewGrid = ({ rows, cols, t_width, t_height }) => {\r\n         if (t_width % cols || t_height % rows) throw new Error('Error creating game grid: Please ensure that the desired column and row counts divide evenly into the total width and height of the level!');\r\n\r\n         let width = t_width / cols;\r\n         let height = t_height / rows;\r\n         let gridHash = {};\r\n   \r\n         for (let Y = 0; Y <= rows - 1; Y++) {\r\n            for (let X = 0; X <= cols - 1; X++) {\r\n               let key = `${X}-${Y}`,\r\n                  gX = X, gY = Y,\r\n                  x = (X * width),\r\n                  y = (Y * height),\r\n                  gridTypeConfig = utils.boxConfig.grid.gridTypes[utils.boxConfig.grid._getRandomTypeConstant()];\r\n   \r\n               let gridBox = new game.Classes.GridBox({ key, gX, gY, x, y, width, height, ...gridTypeConfig });\r\n   \r\n               if (!game.heroPosition && (utils._randInt(1, 20) > 15) && gridBox.type === 'walkable') game.heroPosition = gridBox;\r\n   \r\n               gridHash[key] = gridBox;\r\n            }\r\n         }\r\n   \r\n         return gridHash;\r\n      }\r\n\r\n      _resetGrid = () => {\r\n         let nextSrc, nextDest;\r\n         console.log('resetting')\r\n   \r\n         for (let coords in game.gridHash) {\r\n            let gridBox = game.gridHash[coords];\r\n   \r\n            if (gridBox.isNextSource) nextSrc = gridBox;\r\n            if (gridBox.isNextDestination) nextDest = gridBox;\r\n   \r\n            gridBox.sprite = gridBox.origSprite;\r\n            gridBox.gScore = 0;\r\n            gridBox.hScore = 0;\r\n            gridBox.fScore = 0;\r\n            gridBox._deselect();\r\n            gridBox._clearParent();\r\n            gridBox._clearDestination();\r\n            gridBox._clearSource();\r\n         }\r\n   \r\n         delete game.heroPosition;\r\n         delete game.heroDestination\r\n   \r\n         nextSrc._setSource()\r\n         nextDest._setDestination();\r\n      }\r\n\r\n\r\n   }\r\n   return new Grid();\r\n}","export default ({ game, utils, TWEEN }) => {\r\n   class Hero {\r\n      _initNewHero = grid_position => {\r\n         grid_position._setSource();\r\n\r\n         let { x, y } = grid_position;\r\n         let heroConfig = utils.boxConfig.char.charTypes[0];\r\n         return new game.Classes.CharBox({ x, y, sprite: heroConfig.spriteSet.down, ...heroConfig })\r\n      }\r\n\r\n      _tween = (hero, destination_box, path) => {\r\n         let tween;\r\n         if (destination_box) {\r\n            tween = new TWEEN.Tween(hero).to({ x: destination_box.x, y: destination_box.y }, 360);\r\n            hero._setSpriteDirection(destination_box.direction);\r\n            return tween.start();\r\n         }\r\n      }\r\n   }\r\n   return new Hero();\r\n}","export default ({ game, utils }) => {\r\n   class PathFinder {\r\n      _findPath = () => {\r\n         /* if not first pathfinding movement, reset the grid */\r\n         if (this.allDone) game.Scripts.Grid._resetGrid();\r\n         console.log('starting path')\r\n\r\n         game.findingPath = true;\r\n\r\n         this.allDone = false;\r\n         this.iterations = 0;\r\n         this.nextNearest = null;\r\n\r\n         this.openList = {};\r\n         this.closedList = {};\r\n\r\n         this.openList[game.heroPosition.key] = game.heroPosition;\r\n\r\n         this._iteratePath();\r\n      }\r\n\r\n      _finishPath = () => {\r\n         game.heroDestination._setNextSource();\r\n         game.findingPath = false;\r\n\r\n         this.allDone = true;\r\n\r\n         console.log('completed path')\r\n      }\r\n\r\n      _iteratePath = async () => {\r\n         if (this.allDone) return this._finishPath();\r\n\r\n         let lowestScore = -1;\r\n         let neighbors;\r\n\r\n         /* wait 300ms between each iteration */\r\n         await utils._prt(300)\r\n\r\n         for (let key in this.openList) {\r\n            if (lowestScore === -1 || this.openList[key].fScore < lowestScore) {\r\n               lowestScore = this.openList[key].fScore;\r\n               this.nextNearest = this.openList[key];\r\n            }\r\n         }\r\n\r\n         if (game.tweenHeroWithAlgorithm) game.Scripts.Hero._tween(game.hero, this.nextNearest);\r\n\r\n         if (this.nextNearest.isDestination) {\r\n            this._finishPath();\r\n            return;\r\n         } else {\r\n            let nextInOpened = this.openList[this.nextNearest.key] || false;\r\n            \r\n            if (nextInOpened) {\r\n               let nextKey = this.nextNearest.key;\r\n               delete this.openList[nextKey];\r\n               this.closedList[nextKey] = nextInOpened;\r\n            }\r\n\r\n            neighbors = this.nextNearest._getNeighbors();\r\n            neighbors.forEach(box => {\r\n               if (box.type !== 'blocked' && !box.isSource && !this.closedList[box.key]) {\r\n                  if (!this.openList[box.key]) {\r\n                     this.openList[box.key] = box;\r\n\r\n                     if (game.showPath) {\r\n                        box._setNeighborState();\r\n                        this.nextNearest._setNearestState();\r\n                     }\r\n\r\n                     box.parentZone = this.nextNearest;\r\n\r\n                     box.gScore = (box.parentZone.gScore || 0) + this._calcGScore(box);\r\n                     box.hScore = this._calcHScore(box);\r\n                     box.fScore = this._calcFScore(box);\r\n                  } else {\r\n                     if (this.nextNearest.gScore + this._calcGScore(box) < box.gScore) {\r\n                        box.parentZone = this.nextNearest;\r\n                        box.gScore = this.nextNearest.gScore + this._calcGScore(box);\r\n                        box.fScore = this._calcFScore(box);\r\n                     }\r\n                  }\r\n               }\r\n               game.gridHash[box.key].gScore = box.gScore;\r\n            })\r\n            if (!Object.keys(this.openList).length || this.iterations > 800) {\r\n               this.allDone = true;\r\n            }\r\n            this.iterations++;\r\n            if (!this.allDone) this._iteratePath();\r\n         }\r\n      }\r\n\r\n      _calcFScore = box => box.gScore + box.hScore;\r\n      _calcHScore = box => ((Math.abs(box.x - game.heroDestination.x) + Math.abs(box.y - game.heroDestination.y)) * 10)\r\n      _calcGScore = box => {\r\n         let { direction, type } = box;\r\n         let score = 0;\r\n\r\n         switch (direction) {\r\n            case 'NORTH':\r\n            case 'SOUTH':\r\n            case 'WEST':\r\n            case 'EAST':\r\n               score += 10;\r\n               break;\r\n            case 'NORTH_EAST':\r\n            case 'NORTH_WEST':\r\n            case 'SOUTH_EAST':\r\n            case 'SOUTH_WEST':\r\n               score += 20;\r\n               break;\r\n            default:\r\n               break;\r\n         }\r\n\r\n         if (type === 'walkableSlow') score += 20;\r\n         if (type === 'damage') score += 40;\r\n\r\n         return score;\r\n      };\r\n   }\r\n   return new PathFinder();\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport utils from '../utils.js';\r\n\r\nimport GameClasses from './../GameClasses.js';\r\nimport Grid from './../scripts/Grid.js';\r\nimport Hero from './../scripts/Hero.js';\r\nimport Pathfinder from '../scripts/Pathfinding.js';\r\n\r\nconst TWEEN = require('@tweenjs/tween.js');\r\n\r\nconst gridSprites = new Image();\r\ngridSprites.src = require('./../art/spritesheet.png');\r\n\r\nconst heroSprites = new Image();\r\nheroSprites.src = require('./../art/theDude.png');\r\n\r\n\r\n\r\nclass GameCanvas extends Component {\r\n   constructor() {\r\n      super()\r\n\r\n      this.Classes = GameClasses({ game: this, utils })\r\n      this.Scripts = {\r\n         Grid: Grid({ game: this, utils }),\r\n         Hero: Hero({ game: this, utils, TWEEN }),\r\n         PF: Pathfinder({ game: this, utils })\r\n      }\r\n      \r\n      this.isPaused = false;\r\n   }\r\n\r\n\r\n   /* ------------- REACT LIFECYCLE ------------- */\r\n   \r\n   componentWillMount = () => {\r\n      this.mode = this.props.mode || 'pathfind';\r\n      this.cWidth = this.props.width || 800;\r\n      this.cHeight = this.props.height || 600;\r\n   }\r\n   \r\n   componentDidMount = () => {\r\n      if (this.mode === 'pathfind') {\r\n         this.showPath = true;\r\n         this.showScore = true;\r\n         this.excludeDiagonals = true;\r\n         this.tweenHeroWithAlgorithm = true;\r\n      }\r\n      \r\n      this._initializeGameCanvas();\r\n   }\r\n   \r\n\r\n   /* ----------------- CANVAS ------------------ */\r\n\r\n   _initializeGameCanvas = () => {\r\n      this.canvas = this.refs.g_canvas;\r\n      this.ctx = this.canvas.getContext('2d');\r\n\r\n      /* instantiate level grid objects to be draw into canvas */\r\n      this.gridHash = this.Scripts.Grid._initNewGrid({\r\n         rows: 12,\r\n         cols: 16,\r\n         t_width: this.cWidth,\r\n         t_height: this.cHeight\r\n      \r\n      });\r\n      /* instantiate hero object */\r\n      this.hero = this.Scripts.Hero._initNewHero(this.heroPosition);\r\n      \r\n      /* handle user input/interactions */\r\n      this.canvas.addEventListener('click', e => {\r\n         let gCoords = { x: (Math.ceil(e.clientX / 50) - 1), y: (Math.ceil(e.clientY / 50) - 1) };\r\n         let gridKey = `${gCoords.x}-${gCoords.y}`;\r\n         let boxClicked = this.gridHash[gridKey];\r\n         \r\n         if (boxClicked.type !== 'walkable') return;\r\n         if (!this.findingPath) {\r\n            if (this.heroDestination && (this.heroDestination.key !== boxClicked.key)) boxClicked._setNextDestination();\r\n            else boxClicked._setDestination();\r\n            \r\n            this.Scripts.PF._findPath();\r\n         }\r\n      })\r\n      \r\n      window.addEventListener('keypress', e => {\r\n         if (e.key === 'p') {\r\n            if (this.isPaused) {\r\n               this.isPaused = false;\r\n               this._renderLoop();\r\n            }\r\n            else {\r\n               this.isPaused = true;\r\n               cancelAnimationFrame(this.frameId);\r\n            }\r\n         }\r\n      })\r\n\r\n      /* commence render loop */\r\n      this._renderLoop();\r\n   }\r\n\r\n   /* recursively redraw canvas using requestAnimationFrame, and pass each render timestamp into our TWEEN engine */\r\n   _renderLoop = _ts => {\r\n      this._drawRender();\r\n      TWEEN.update(_ts || 0);\r\n      this.frameId = requestAnimationFrame(this._renderLoop);\r\n   }\r\n\r\n   /* clear canvas and redraw all objects according to new state */\r\n   _drawRender = () => {\r\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n      this._drawGrid();\r\n      this._drawBox('hero', this.hero);\r\n   }\r\n\r\n   /* recursively draw each grid object */\r\n   _drawGrid = () => { for (let coord in this.gridHash) this._drawBox('grid', this.gridHash[coord]) }\r\n\r\n   /* function to draw individual game objects to the canvas */\r\n   _drawBox = (type, box) => {\r\n      if (!box) return;\r\n\r\n      switch (type) {\r\n         case 'grid':\r\n            this.ctx.fillRect(box.x, box.y, box.width, box.height);\r\n            this.ctx.drawImage(gridSprites, box.sprite.x, box.sprite.y, box.sprite.width, box.sprite.height, box.x, box.y, box.width, box.height);\r\n\r\n            if (box.gScore && this.showScore) {\r\n               this.ctx.font = '20px Arial';\r\n               this.ctx.fillStyle = box.type === 'walkableSlow' ? '#603F39' : box.type === 'damage' ? '#F07E2D' : '#FFF';\r\n               this.ctx.fillText(box.gScore, box.x + 5, box.y + 20);\r\n            }\r\n\r\n            return;\r\n         case 'hero':\r\n            this.ctx.fillStyle = box.color;\r\n            this.ctx.fillRect(box.x, box.y, box.width, box.height);\r\n            this.ctx.drawImage(heroSprites, box.sprite.x, box.sprite.y, box.sprite.width, box.sprite.height, box.x, box.y, box.width, box.height);\r\n\r\n            return;\r\n         default:\r\n            return;\r\n      }\r\n   }\r\n   \r\n\r\n   render() {\r\n      return (<>\r\n         <canvas\r\n            id=\"g_canvas\"\r\n            ref=\"g_canvas\"\r\n            width={this.cWidth}\r\n            height={this.cHeight}\r\n         />\r\n      </>);\r\n   }\r\n}\r\n\r\nexport default GameCanvas;","import React, { Component } from 'react';\r\n\r\nimport GameCanvas from './components/GameCanvas';\r\n\r\nclass GameInterface extends Component {\r\n   render() {\r\n      \r\n      let canvasProps = {\r\n         width: 800,\r\n         height: 600,\r\n         mode: 'pathfind'\r\n      }\r\n\r\n      return (\r\n         <div style={{ width: '800px', height: '600px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <GameCanvas {...canvasProps} />\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default GameInterface;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GameInterface from './GameInterface';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<GameInterface />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}